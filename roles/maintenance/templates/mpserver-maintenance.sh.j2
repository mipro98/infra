#!/bin/bash

# https://unix.stackexchange.com/a/228333
# set -u

# This file is the ultimate snapshot + backup + notification script for my homeserver.
#
# It takes care of:
#
#     - Creating *snapshots* of the correct subvolumes depending on day of the week with btrbk
#     - Mounting the BACKUP drive and creating *backups* to external drive with btrbkp
#     - Updating the system (ARCH)
#     - Updating docker containers
#     - performing maintenance tasks such as btrfs-scrub
#     - Sending a mail with a status report of all the results
#
#
# Approach:
#
#     1. Detect day of the week and determine correct schedule.
#     2. Execute operations based on schedule
#     3. send the log via email.
#

DRYRUN=false
EMAIL=true

LOG_TYPE="ERROR"

# Get this script folder path
SCRIPTDIR="$(dirname "$(readlink -f "$BASH_SOURCE")")"
LOGFILE="${SCRIPTDIR}/logs/$(date +%Y%m%d_%H%M%S).log"
LOCKFILE=/tmp/running-maintenance.lock

MOUNT_BKP_DRIVE="{{ mount_backup_drive }}"
MOUNT_NAS="{{ mount_nas_drive }}"

# ------ These variables get filled by Ansible according to its vars: ------

DOCKER_USER={{ username }}  # user to execute docker-compose command
COMPOSE_REPO="{{ docker_compose_dir }}"
DOCKERDATA="{{ docker_data_dir }}"

# --------------

DOCKERDATA_BKP_DIR="${MOUNT_NAS}/Backups/Michi/00_dockerdata"

BTRBK_CONFIG="{{ btrbk_config_dir }}"


usage()
{
    echo -e "Usage: $0 [<options>] [<command>]\n"

    echo -e "Options:"
    echo -e "\t--dry-run\tDon't execute anything, only show what would be executed"
    echo -e "\t--no-email\tDon't send an email with the log"
    echo -e "\t--help\t\tShow this help message and exit."

    echo -e "\nCommands:"
    echo -e "\tdaily\t\tRun daily maintenance tasks"
    echo -e "\tweekly\t\tRun weekly maintenance tasks"
    echo -e "\tmonthly\t\tRun monthly maintenance tasks"
    echo -e "\tdocker <cmd>\tRun docker-compose <cmd> on all services"
    echo -e "\n\tIf no command is passed, the script will determine the correct schedule and run the appropriate tasks."
}


log()
{
    echo -e "$@" &>> "$LOGFILE"
}

send_email_with_logs()
{
    if $EMAIL; then
        mutt -s "$LOG_TYPE Server Maintenance Log $(date +%F)" {{ email_alerts_receiver }} < $LOGFILE &> /dev/null
    fi
}

quit_script()
{
    local success=true      # default is success unless an error is passed as argument

    if [[ $# -gt 0 ]]; then
        success=false
    fi

    if ! $success; then
        log "\n\nERROR: $1"
    fi

    send_email_with_logs
    rm $LOCKFILE

    if $success; then
        exit 0
    else
        exit 1
    fi
}

# ----------------------------------------------- System -----------------------------------------------


mount_backup_drive()
{
    if findmnt $MOUNT_BKP_DRIVE > /dev/null
    then
        log "$MOUNT_BKP_DRIVE was already mounted!"
    else
        mount $MOUNT_BKP_DRIVE
    fi
}

reboot_required()
{
    local active_kernel current_kernel
    active_kernel=$(uname -r | sed 's/-arch/.arch/')
    current_kernel=$(pacman -Q linux | sed 's/linux //')
    if [[ $active_kernel != "$current_kernel" ]]; then
        log "\n\nA reboot is required! \n\trunning: $active_kernel \n\tinstalled: $current_kernel"
    fi
}

update_system()
{
    # update system
    if checkupdates &> /dev/null; then
        log "\n\nupdates available:"
        log "$(checkupdates)"
        if ! $DRYRUN; then
            pacman -Syu --noconfirm &>> $LOGFILE
        fi
    else
        log "\n\nNo system updates available."
    fi
    reboot_required
}

# ----------------------------------------------- Docker -----------------------------------------------

show_running_containers()
{
    log "\n\nRunning containers:"
    log "$(docker ps --format {% raw %}'\t{{.Names}}'{% endraw %})"
}

stop_containers()
{
    # stop all docker containers
    log "\n\nstopping containers:"
    log "$(docker ps --format {% raw %}'\t{{.Names}}'{% endraw %})"
    if ! $DRYRUN; then
        # docker stop "$(docker ps -q)"   # not working for whatever reason?!??
        docker_compose_all_services stop
    fi
    show_running_containers
}

restart_containers()
{
    # restart docker containers
    if ! $DRYRUN; then
        # docker start "$(docker ps -a -q)" # not working for whatever reason?!??
        docker_compose_all_services start
    fi
    show_running_containers
}


docker_compose_all_services()
{
    log "\n\nRunning docker-compose $* on all services..."
    if ! $DRYRUN; then
    {% for service in docker_services %}
    docker-compose -f "${COMPOSE_REPO}/{{ service }}/docker-compose.yml" "$@" &>> /dev/null #|& tee -a $LOGFILE
    {% endfor %}
    fi
}

docker_prune()
{
    log "\n\nPruning docker system..."
    if ! $DRYRUN; then
        docker system prune -af --volumes &>> $LOGFILE
    fi
}



# ----------------------------------------------- Btrbk & rsync -----------------------------------------------


backup_dockerdata()
{
    log "\n\nRsyncing files from dockerdata to Backup subvolumes."
    $RSYNC_CMD -Aaz --stats --delete "${DOCKERDATA}/" "$DOCKERDATA_BKP_DIR" &>> $LOGFILE
}

snapshot_all()
{
    log "\n\nCreate snapshots of all subvolumes..."
    # create btrfs snapshots of all subvolumes
    $BTRBK_CMD --preserve snapshot &>> $LOGFILE
}


run_backup()
{
    log "\n\nCreating BACKUP: syncing snapshots with external drive using btrbk"
    $BTRBK_CMD resume &>> $LOGFILE
}

scrub() {
    if [[ $# -eq 0 ]]; then
        log "ERROR: no device for scrubbing specified!";
        return 1
    fi
    log "\n\nStarting scrub for $1..."
    if ! $DRYRUN; then
        btrfs scrub start -Bd -c 2 -n 4 $1 &>> $LOGFILE
    fi
    btrfs dev stats "$1" &>> $LOGFILE
}

# ----------------------------------------------------- Scripts ----------------------------------------------------------


daily()
{
    echo "Running Daily script."
    log "$(date +%F), $(date +%T): Running Daily script."
    LOG_TYPE="Daily"

    # make a snapshot of "Daten" subvolume
    log "Creating snapshot of 'Daten' subvolume."
    $BTRBK_CMD --preserve snapshot Daten &>> $LOGFILE
}

weekly()
{
    echo "Running Weekly script"
    log "$(date +%F), $(date +%T): Running Weekly script"
    LOG_TYPE="Weekly"

    mount_backup_drive
    stop_containers
    backup_dockerdata
    snapshot_all
    restart_containers
    run_backup

    # unmount backup drive
    sync
    umount $MOUNT_BKP_DRIVE

    update_system
}

monthly()
{
    echo "Running Monthly script"
    log "$(date +%F), $(date +%T): Running Monthly script"
    LOG_TYPE="Monthly"

    mount_backup_drive
    stop_containers
    backup_dockerdata
    snapshot_all

    # update all containers
    docker_compose_all_services pull
    docker_compose_all_services up -d
    show_running_containers
    docker_prune

    run_backup

    scrub $MOUNT_NAS
    scrub $MOUNT_BKP_DRIVE

    # unmount backup drive
    sync
    umount $MOUNT_BKP_DRIVE

    update_system
}


evaluate_schedule()
{
    ######## determine whether to run daily, weekly or monthly backup operations ########

    # MONTHLY: Last sunday of the month https://unix.stackexchange.com/a/330624
    if [[ $(date -d "$date + 1week" +%d%a) =~ 0[1-7]Sun ]]; then monthly

    # WEEKLY: Every sunday (except last sunday)
    elif [[ $(date +%a) == "Sun" ]]; then weekly

    # DAILY: Every day between 0h and 6h a.m.
    elif [ "$(date +%H)" -ge 0 ] && [ "$(date +%H)" -le 6 ]; then daily

    # other triggers are ignored and a notification is sent to notify the admin of unwanted behavior
    else
        quit_script "Script triggered at the wrong timeframe. It is $(date +%F), $(date +%T)"
    fi
}

# --------------------------------------------------------- Main -------------------------------------------------------




# --------------------- check if root ------------------------

if [[ $(id -u) -ne 0 ]]
then
    echo "Please run as root!"
    exit 1
fi

# -------------------- help message? -----------------------

if [[ "$1" == "--help" ]]; then
    usage
    exit 0
fi


# -------------------- check lockfile -----------------------

# create log file with user owner
sudo -u $DOCKER_USER touch "$LOGFILE"

# prevent double-trigger while running:
if [[ -f $LOCKFILE ]]
then
    log "$LOCKFILE exists, so nothing happened!"
    send_email_with_logs
    exit 1
fi

# create lockfile
touch $LOCKFILE



# -------------------- evaluate arguments -----------------------


# check if --dry-run or --no-email is set as first argument

DRYRUN_ARG="--dry-run"
NOEMAIL_ARG="--no-email"
while [[ "$1" == "$DRYRUN_ARG" || "$1" == "$NOEMAIL_ARG" ]]; do

    if [[ "$1" == "$DRYRUN_ARG" ]]; then
        DRYRUN=true
        shift
    fi

    if [[ "$1" == "$NOEMAIL_ARG" ]]; then
        EMAIL=false
        shift
    fi
done


if $DRYRUN; then
    RSYNC_CMD="rsync --dry-run"
    BTRBK_CMD="btrbk -c $BTRBK_CONFIG -n"
else
    RSYNC_CMD="rsync"
    BTRBK_CMD="btrbk -c $BTRBK_CONFIG"
fi

log "$(date +%F), $(date +%T): Script started.\n"

log "DRYRUN: $DRYRUN"
log "EMAIL: $EMAIL"


# check if a command is passed as argument

case $1 in
    "")     # empty string
        evaluate_schedule
        ;;
    daily|weekly|monthly)
        if [[ $# -gt 1 ]]; then
            quit_script "$1 command does not allow parameters! Parameters passed: $*"
        fi
        ;;&     # fallthrough because of &
    daily)
        daily
        ;;
    weelky)
        weekly
        ;;
    monthly)
        monthly
        ;;
    docker)
        shift
        if [[ $# -eq 0 ]]; then
            quit_script "docker command needs a parameter!"
        fi
        EMAIL=false
        log "Deactivating email notifications for docker command."
        docker_compose_all_services "$@"
        ;;
    *)
        usage
        quit_script "Invalid command or option: $*"
        ;;
esac


log "\n\n$(date +%F), $(date +%T): SUCCESSFULLY FINISHED."
quit_script
